; Checks that type.fields() returns correct values for different types.

; RUN: %clangxx -g -o %t memberfield/memberfield.cc
; RUN: %lldb -b -o 'b main' -o 'r' -o 'script import memberfield' %t | FileCheck %s

; Check fields of "Derived"
CHECK: ========
CHECK: name: Base1
CHECK: type: Base1
CHECK: bitpos: 0
CHECK: bitsize: 0
CHECK: parent_type: Derived
CHECK: is_base_class: True
CHECK: artificial: False
CHECK: No enumval attribute.
CHECK: ========
CHECK: name: Base2
CHECK: type: Base2
CHECK: bitpos: 32
CHECK: bitsize: 0
CHECK: parent_type: Derived
CHECK: is_base_class: True
CHECK: artificial: False
CHECK: No enumval attribute.
CHECK: ========
CHECK: name: x
CHECK: type: int
CHECK: bitpos: 64
CHECK: bitsize: 0
CHECK: parent_type: Derived
CHECK: is_base_class: False
CHECK: artificial: False
CHECK: No enumval attribute.
CHECK: ========
CHECK: name: y
CHECK: type: int
CHECK: bitpos: 96
CHECK: bitsize: 0
CHECK: parent_type: Derived
CHECK: is_base_class: False
CHECK: artificial: False
CHECK: No enumval attribute.

; Check fields of EnumType
CHECK: ========
CHECK: name: VALUE0
CHECK: type: None
CHECK: No bitpos attribute.
CHECK: bitsize: 0
CHECK: parent_type: EnumType
CHECK: is_base_class: False
CHECK: artificial: False
CHECK: enumval: 0
CHECK: ========
CHECK: name: VALUE1
CHECK: type: None
CHECK: No bitpos attribute.
CHECK: bitsize: 0
CHECK: parent_type: EnumType
CHECK: is_base_class: False
CHECK: artificial: False
CHECK: enumval: 1234
CHECK: ========
CHECK: name: VALUE2
CHECK: type: None
CHECK: No bitpos attribute.
CHECK: bitsize: 0
CHECK: parent_type: EnumType
CHECK: is_base_class: False
CHECK: artificial: False
CHECK: enumval: 5678

; Check that DerivedAlias has the same number of fields as Derived. The point is
; verifying that fields() also works on typedefed types. We have already checked
; that fields() returns the right values, so no need to check again.
CHECK: DerivedAlias has 4 fields.
